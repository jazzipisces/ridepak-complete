version: '3.8'

services:
  # Admin Panel Frontend
  admin-panel:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5000
      - REACT_APP_SOCKET_URL=http://localhost:5000
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - ride-hailing-network
    restart: unless-stopped

  # Backend API (placeholder - you need to implement this)
  backend:
    image: node:18-alpine
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ride_hailing_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - ride-hailing-network
    restart: unless-stopped
    # Note: You need to add backend source code and proper Dockerfile

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ride_hailing_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ride-hailing-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ride-hailing-network
    restart: unless-stopped

  # nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - admin-panel
      - backend
    networks:
      - ride-hailing-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ride-hailing-network:
    driver: bridge